#!/usr/bin/env bash
OR
#!/bin/env bash

Bash Time command

bash給定變數數值可用"=", 但前後不可有空格. ==> VAR=123
可使用"unset"去移除變數 ==> unset VAR
取得變數內數值 ==> $VAR

[export]
  讓變數可在不同process 間互享 ==> export VAR
  function 也可以export  ==> export -f myfunc
  單下 export , 可得到目前已被 export 的變數列表
  
[enable]
  Get a list of the commands that bash are builtin

[compgen -k]
  What keywords are in Bash
  
[.bash_profile] is read when Bash is involed as a login shell
[.bashrc] is executed when a new shell is started <== so don't export variable, like PATH in .bashrc it.
  but because aliases and functions are not normally exported, you would define those in your .bashrc.
  And those aren't growing like PATH=$, PATH value would be.

[source v. .]
". " : Dot space is the same as using the command source.
"." : will execute by a new process

[alias / unalias]
  alias ls='ls --color=auto'
  unalias ls

[echo]
  -n / -e / -E

[typeset]
  typeset -i x
    let x++; let y=x**2; let x=x*3; let x*=5, ...
    
[declare]
  declare -l uppercase values in the variable are converted to lowercase.
  declare -u lowercase values in the variable are converted to uppercase.  
  declare -r variable is made read-only.
  
Local Variables and Typeset

[read]
While Loops

For Loops
  seq 1 5 # prints 1 2 3 4 5
  "string" v. `command`
  for num in `seq 1 5`  
  generate sequences with {A..Z}, {1..10}, etc...
  
  for d in $(<data_file)
  #loops over space/newline
  #separated data in data_file
  
  for j in *.c
  #making a list with file globbing
  
  for f in $(find . -name *.c)
  #using a command to generate a list
  
[nl v. cat]

find /etc 2>/dev/null

Bash Functions , can by shell or comman line directly.
function NAME {
   function body ...
}
hvar = $(NAME)

[exit v. return]

exit terminates the shell process , 
exit in a funciton terminates the whole shell program, not just function.
exit <VALUE> sets the exit status,
represented by $? to <VALUE>, so you can get exit status by echo $?

[file]
0 => stdin, 1 => stdout, 2=> stderr

[">" , "<" , "|"]

command &> file
# file gets stdout and stderr from command, file is created or overwritten.

command 2>&1 | command2 == command |& command2 (bash only but not sure about other shells)

command >> file
command &>> file
wc -l file

"<<" : Here documents : A way to embed input for standard input inside of a script file.
sort <<END
cherry
banana
apple
END

exec N<> myfile
#open file descriptor N for reading & writing with myfile

exec N>&- or exec N<&-
# closes file descriptor N

[lsof] : see what file descriptors for a process are open
  lsof -p [shell's PID]
  
The Case Statement :


[test]
test -d X  # success if X is a directory
test -f X  # success if X is a regular file
test -s X  # success if X exists and not empty
test -x X  # success if you have x permission on X
test -w X  # success if you have w permission on X
test -r X  # success if you have r permission on X
  
Arithmetic Operators 
  Use in (( )) or eith let command.
  
Defininf filters and using head, tail, and wc
  run command in the backgroud : "&"
  ./test.sh >output &
  
  tail -n2 -f output      <== ???
  
[sed] : stream editor
sed `s/old/new/` myfile  #substitute the first occurence of "old" on each line for "new" in the file.
                         # "old" is a pattern and can be a regular expression.
sed `s/old/new/G` myfile  #substitute ALL occurence of "old" on each line for "new" in the file.

[awk]
$ps -ly | ./awk1
