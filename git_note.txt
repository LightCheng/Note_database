[git config]
	System : /etc/gitconfig
		git config --system
	User : ~/.gitconfig
		git config --global	user.name "Light_Cheng"		
	Project : my_project/.git/config
		git config
  
  git config --list
  core.editor / color.ui

[commit message best practices]
  - short single-line summary (less than 50 chars)
  - optionally followed by a blank line and more complete description
  - keep each line to less than 72 chars
  - in present sentense , not past tense.

[commit log]
  - git log -n 3
    git log --since=2016-08-01
            --since="2 weeks ago"
            --since="3 days ago"
            --since=3.days            
    git log --author="light_cheng"
    git log --grep="Init"
    git log HEAD
    git log --oneline
    git log Start_SHA_number..end_SHA_number checked-file.txt [ignore end_SHA_number means till the latest]
    git log -p Start_SHA_number..end_SHA_number checked-file.txt [show the change of the file]
    git log --graph --oneline --all --decorate
    git log --stat --summary # 查每個版本間的更動檔案和行數 
    
[three-trees architecture]
   	repository <= (commit) staging index <= (add) working
   	SHA-1
   	HEAD pointer / repository
    .git/HEAD
  
[basic]
    status / add / commit / rm
    git diff [repository vs working directory]
    git diff --staged (or --cached) [repository vs staging index]
    git diff file_name
    git diff SHA_num file_name
    git diff -b -w SHA_num1..SHA_num2
    git diff SHA_num1..HEAD --stat --summary
    
    [rename]git mv old_name_file.txt new_name_file.txt
    
[checkout]
    git checkout : allows you to discard file changes in the working directory.
    
[undo change]
   (working directory)
       git checkout -- restore_file.txt  ["--" means current branch]
   (staging index)
       git reset HEAD restore_file.txt [reset the index]
       git checkout SHA_num -- restore_file.txt  [set restore_file.txt to SHA_num status with staged status]
   (repository)
       Only the most recent commit that HEAD points to , we do have the ability to edit ... by "amend" option.
       you can change your contents or even just your commit message for the most recent commit.
       git commit --amend -m "Message"
       
       (revert a commit completely and totally)       
       git revert SHA_num
       
   (using reset to undo many commits) control HEAD pointer
   git reset 
      --soft : only move HEAD pointer and not going to change staging index or the working directory at the same time.
      --mixed(default) : move HEAD pointer , changes staging index to match repository but not change working directory.
      --hard : move HEAD pointer , changes staging index and working directory to match repository.

[remove untracked files]    
   git clean -n
   git clean -f
   
[ignoring files]
   (untracked file)
   project/.gitignore
     * ? [aeiou] [0-9] 
     !
     comment lines begin with #
   (tracked files)
   1. git rm --cached file_name (remove the file from staging index)
   2. add the file name into .gitignore
   
[tracking empty directory]
   project/.gitkeep
   touch assets/pdfs/.gitkeep
   
[tree-ish]
   git ls-tree HEAD
   
[branch]
   step1 : git branch new_branch_name
   step2 : git checkout new_branch_name
   or just 
   git checkout -b new_branch_name
   
   git diff branch1_name..branch2_name
   
   (check which branch be included)
      git branch --merged
   
   (rename branch)
      git branch -m old_branch_name new_branch_name
      
   (delete branch)
      git branch -d branch_name 'care merged items'
      git branch -D branch_name 'don't care any merged items'
      
   (merge other branch)
      git merge be_merged_branch_name
      
   (fast_forward merges vs. real merges)   
       fast_forward merges : receiving branch no need to make a new commit.
       merges
   
   (merge conflict) abort / manual resolve / tool resolve
       git merge --abort
       manual resolve all conflicts
       git mergetool 
       
     * merge often 
    ** track changes to master

[stash]
   git stash save "item Message"
   git stash list
   git stash show -p stash@{N}
   git stash pop stash@{N}
   git stash apply stash@{N}
   git stash drop stash@{N}
   git stash clear
   
[remotes]
   fetch : remote -> origin/master
      No harms of our working directory.
      So :
      - always fetch before you work.
      - fetch before you push.
      - fetch often.      
   merge : origin/master -> master
   git pull = git fetch + git merge
   
   git remote [list all known remote , just like git branch]
   git remote add <alias> <url>
   git remote rm <alias>
   git remote -v 
   git push -u <remote alias> <local branch name>  # -u : tracking branch
   git branch --set-upstream non_tracking_branch_name origin/remote_branch_name
   git log --oneline origin/master
   git diff master..origin/master
   
   git clone remote_respository_path local_name
   
   git push origin master #if it's tracking branch , you can just "git push"

   git push origin local_master:remote_master
   git push origin :non_tracking  #remove remote branch
   git push origin --delete non_tracking
   
[alias]
   git config --global alias.st status
   git config --global alias.co checkout
   git config --global alias.ci commit
   git config --global alias.br branch
   git config --global alias.dfs "diff --staged"   
   git config --global alias.logg "log --graph --decorate --oneline --abbrev-commit --all"
   
[Git hosting]   
   setup a git server ...
   Gitosis
   Gitolite
0. 建立遠端數據庫的方法 ：
   - 在 GitHub建立新的Git remote respoitory then push local database to remote.
	git init
	git add README.md
	git commit -m "first commit"
	git commit -v # 可看到檔案那些內容有被變更.
	git remote add origin https://github.com/LightCheng/GPSPerformance.git
	git push -u origin master
        git remote #list all remote that it knows about
        git remote -v 
        git remote rm alias_name
        
   
1. 建立本地端數據庫的方法有兩種：
   一種是重新建數據庫 : 
   - git init
     git add <file>...  #使用 'git add .'表示可以把當前目錄下所有的檔案加入到索引
     git add -i # 進入互動模式 ?
     
     git commit -m "<提交訊息>"

   另一種是複製遠端數據庫 : git folk ?
     git clone
     - git clone https://github.com/LightCheng/GPSPerformance.git cloned_project_path


2. "git commit" generates "revision"

3. Working Tree & index ?

4. 可以為Git的命令設定別名，例如：「checkout」可以省略為「co」來執行。
   $ git config --global alias.co checkout

5. git conflict ?
   - git pull origin master # 從遠端數據庫取得最新的修改歷史
   - # if 系統出現合併時發生衝突的警告訊息
       將衝突的地方進行修改，導入兩方的修改，刪除多餘的標示行
       git add file
       git commit -m "fix conflict code"
       git push origin master

6. HEAD
   在Git，HEAD代表"當前"分支的最新提交名稱。在建立新的數據庫時，Git會預設HEAD指向master分支。您可以藉著移動HEAD的指向，更新正在使用的分支。


7. 分支的合併
   - git merge :
     a. 合併 bugfix 分支到 master 分支時， 如果master 分支的狀態是沒有更改過的話，那麼這個合併是非常簡單的。 
        bugfix 分支的歷史記錄包含了 master 分支的歷史記錄，所以只要把bugfix 移動到 master 分支就可以導入 bugfix 分支的內容。
        這樣的合併被稱為 fast-forward（快轉）合併 , 不會產生一個名為「合併提交」的commit。
        ==> 執行合併時，使用 non fast-forward 參數選項，即使是可以 fast-forward 的合併也會建立新的提交並合併喔。
            執行 non fast-forward 的合併後，分支會維持原狀，要調查在這個分支裡的操作就容易多了。

     b. master 分支的歷史記錄有可能在 bugfix 分支分開後有新的修改。
        這時候，要把 master 分支的修改內容和 bugfix 分支的修改內容匯合起來。
        匯合兩個修改時會產生一個名為「合併提交」的commit。
        Master的位置會被更新到新建立的合併提交上。
     修改內容的歷史記錄會維持原狀，但是合併後的歷史紀錄會變得更複雜。

   - git rebase:
     rebase bugfix 分支到 master 分支。bugfix 分支的歷史記錄會增加在 master 分支的後面。因此，"歷史記錄會被統一，形成簡單的一條線".
     移動commit 有可能會發生衝突，所以需要修改各自commit時發生衝突的部分。
     執行Rebase 時， master 的位置不變，因此，待 master 分支合併 bugfix 分支後，master 的HEAD會移動到 bugfix 的HEAD這裡。
     修改內容的歷史記錄會接在要合併的分支後面，合併後的歷史記錄會比較清楚簡單，但是，會比使用 merge 更容易發生衝突。

8. Stash ?


9. Tag :
   Git中，標籤有兩種類型：輕量標籤(lightweight tag)和標示標籤(annotated tag)。
   lightweight tag : 
   	不可變更的暫時標籤 , 可以添加名稱 :
  	通常使用在本地端作為暫時性的使用或一次性的使用。
   annotated tag :
   	可以添加打標簽者的名稱、email及日期 , 可以添加名稱/註解/簽名.
	用在較重要的提交上，如發布提交上可以使用標示標籤來增加註解或簽名。

   添加標示標籤 :
	git tag -a <tagname> ==> edit 
	OR
	git tag -am "連猴子都能懂的Git" banana
   顯示標籤的列表和註解
	git tag -n
   刪除標籤
	git tag -d <tagname>

10. 修改最近的commit :	
   欲修改同一個分支最近的提交內容或註解，您可以在提交命令時加上 --amend 參數
   主要使用的場合
     增加最近提交時漏掉的檔案
     修改最近的提交的內容或註解

11. 取消過去的commit :
   使用 revert 命令，可以取消指定的提交內容。

12. 匯合分支上的commit 一同合併 : Squash
    使用 "--squash"指定欲合併的分支，就可以在分支上新建一個匯合所有commits的commit。

13.變更git user email: 
   git config --global user.email Light_Cheng@compal.com

14.Patch created by git-format : git am <patch>
   Git created patches are meant to be applied with Git tools => git apply <patch>
   If the patch is not created with Git, then just use a patch program 'behind the back' of Git. Often this is the program 'patch': patch <patch>
  

Tips :
  - git log --graph --oneline
    用log命令來確認數據庫的修改歷史。若加入 --graph 參數可以圖表方式顯示分支歷史。加入--oneline 簡化輸出訊息，以簡潔方式呈現。

